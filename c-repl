#!/usr/bin/python

import argparse
import cmd
import copy
import logging
import os
import re
import signal
import subprocess
import sys

VERSION = "0.1.3"
INDENT = "  "
CLANG = "clang"
FIND_HEADER = "./assets/find-header"

parser = argparse.ArgumentParser(
		description="C-REPL is for those who'd like to use C like an interpreted language but just don't want to install ANYTHING, caveman style. But to be fair, you still need to install (non-ancient) 'clang' and 'python' (which you obviously have if you can read this). And of course, if you have 'clang', you may already have 'clang-repl' on your system. 'clang-repl' is the official Clang support for C/C++ REPL, and I won't blame you if you use it over this. (By the way, C-REPL has no plan to support C++.)")
parser.add_argument("-e", "--error-diag", help="attach full error diagnostic", action="store_true")
parser.add_argument("-o", "--out-path", help="set output path for code", type=str, default="/tmp/c-repl.c")
parser.add_argument('-i', "--include", help="files to include", type=str, action='append')
args = parser.parse_args()

class StdIncludePreproc():
    def __init__(self, path, depth):
        self.path = path
        self.depth = depth
        self.err = []
        self.commented = False

    def __repr__(self):
        incl_path = '/'.join(self.path.split('/')[-self.depth:])
        return "#include <{}>".format(incl_path)

    def get(self):
        out = ["* " + err_line for err_line in self.err]
        out += [self.__repr__()]
        if (self.commented) or (self.err):
            out = ["// " + l for l in out]
        return out

class Preproc():
    def __init__(self, s):
        self.s = s.strip()
        self.err = []
        self.commented = False

    def get(self):
        out = ["* " + err_line for err_line in self.err]
        out += [self.s]
        if (self.commented) or (self.err):
            out = ["// " + l for l in out]
        return out 

class Statement():
    def __init__(self, st):
        self.st = st
        self.err = []
        self.commented = False

    def get(self):
        out = ["* " + err_line for err_line in self.err]
        out += [self.st]
        if (self.commented) or (self.err):
            out = ["// " + l for l in out]
        return out

class Block():
    def __init__(self, head):
        self.head = head.strip()
        self.children = []
        self.repr = self.head
        self.err = []
        self.commented = False
        self.kind = "?"
        self.name = ""
        self.end = ""

        if (not self.head):
            self.kind = "block"
            self.repr = "(block)"
        else:
            re_block_kw = re.search("^(for|while|else if|if|case) *\\(", self.head)
            if (re_block_kw):
                self.kind = re_block_kw.group(1)
            else:
                re_block_else = re.search("^else$", self.head)
                if (re_block_else):
                    self.kind = "else"
                else:
                    re_def_kw = re.search("^(typedef )?(struct|union|enum) ([a-zA-Z_][a-zA-Z0-9_]*)", self.head)
                    if (re_def_kw):
                        self.kind = re_def_kw.group(2)
                        self.name = re_def_kw.group(3)
                    else:
                        self.kind = "function"
                        re_func_name = re.search("([a-zA-Z_0-9]+) *\\(", self.head)
                        if (re_func_name):
                            self.name = re_func_name.group(1)
        
        if (self.name == "main"):
            self.repr = ""

    def add(self, child):
        self.children += [child]

    def pop(self):
        self.children = self.children[:-1]

    def get(self):
        out = ["* " + err_line for err_line in self.err]
        out += ["{}{{".format(self.head + " " if (self.head) else "")]
        for child in self.children:
            child_lines = child.get()
            for child_line in child_lines:
                out += ["{}{}".format(INDENT, child_line)]
        if (self.kind == "enum" and not self.children):
            out += ["{}{}_NO_ELEMENT".format(INDENT, self.name)]
        if (not self.end):
            out += ["}"]
            if (self.kind in ["struct", "union", "enum"]):
                out[-1] += ";"
        else:
            out += [self.end]
        if (self.commented) or (self.err):
            out = ["// " + l for l in out]
        return out

class EnumType():
    def __init__(self, name="?", opaque=False):
        self.name = name
        self.children = []
        self.opaque = opaque

    def get(self, opt=[]):
        if (self.opaque):
            return ["enum {}".format(self.name)]
        else:
            ret = ["enum {} {{".format(self.name)]
            for child in self.children:
                ret += ["{}{},".format(INDENT, child)]
            ret += ["}"]
            return ret

    def fields(self):
        return self.children

class RecordType():
    def __init__(self, kind="?", name="?", opaque=False):
        self.kind = kind 
        self.name = name
        self.children = []
        self.opaque = opaque

    def get(self, opt=[]):
        if (self.opaque):
            return ["{}{}".format(self.kind, " " + self.name if self.name else "")]
        else:
            ret = ["{} {}{{".format(self.kind, self.name + " " if (self.name and ("no-print-unnamed" not in opt or not self.name.startswith("@unnamed"))) else "")]
            for child in self.children:
                ret += [INDENT + s for s in child.get(opt)]
            ret += ["}"]
            return ret

    def fields(self):
        return [c.fields() for c in self.children]

class GenericType():
    def __init__(self, name="?"):
        self.name = name

    def get(self, opt=[]):
        return [self.name]

    def fields(self):
        return self.name

class RecordField():
    def __init__(self, type=None, name="?"):
        self.type = type
        self.name = name

    def get(self, opt=[]):
        ret = self.type.get(opt) if self.type else ["?"]
        ret[-1] += " {};".format(self.name)
        return ret

    def fields(self):
        if (isinstance(self.type, RecordType)):
            return { self.name: self.type.fields() }
        else:
            return self.name

class TranslationUnit():
    def __init__(self, out_path=None):
        self.out_path = out_path
        self.incls = []
        self.defs = []
        self.funcs = []
        self.main = Block("int main()")

    def get(self):
        out = []
        for incl in self.incls:
            out += incl.get()
        for deff in self.defs:
            def_strs = deff.get()
            if (out):
                if (len(def_strs) > 1 or "}" in out[-1]): 
                    out += [""]
            out += def_strs
        if (self.funcs): out += [""]
        for func in self.funcs:
            out += func.get()
        out += [""]
        out += self.main.get()
        return out

    def print(self):
        with open(self.out_path, 'w') as f:
            f.writelines([l + '\n' for l in self.get()])
        return True

class REPLoop(cmd.Cmd):
    try:
        c_repl_moddate = subprocess.check_output(["LANG=en date -r {} +\"%d %b %Y %H:%M:%S\"".format(__file__)], shell=True).decode().strip()
    except:
        c_repl_moddate = "?? ??? ???? ??:??:??"

    try:
        clang_version_str = subprocess.check_output(["clang -dM -E -x c /dev/null | grep __VERSION__"], shell=True).decode().strip()
        clang_version = clang_version_str.split(' ', 2)[2].replace('"', '')
    except:
        clang_version = "Clang rersion I♬don't♪know"

    intro = "C-REPL {} (main, {}) [{}] on linux\n".format(VERSION, c_repl_moddate, clang_version) + \
            "Type \"help\" for more information."
    prompt = ">>> "

    def __init__(self, src_path="/tmp/c-repl.c", exe_path="/tmp/c-repl", error_diag=False):
        super().__init__()

        self.src_path = src_path
        self.exe_path = exe_path
        self.tu = TranslationUnit(out_path=src_path)
        self.stack = [self.tu.main]

        self.wait_subproc = False
        self.dfn_sigint = signal.signal(signal.SIGINT, self.interrupt)
        self.prev_exe_out = ""
        self.error_diag = error_diag

        open(self.src_path, 'w').close()
        open(self.exe_path, 'w').close()

    def do_help(self, arg):
        print("Enter C statements line-by-line. See README.md for details.")
        print("")
        print("Meta-commands:")
        print("  %print [<expr>]    Print the return value of an expression <expr>.")
        print("                     If <expr> is not given, print the working code.")
        print("  %exit              Exit the prompt.")

    def exit(self):
        print("Goodbye ᕕ(⌐■_■)ᕗ ♪♬")
        exit(0)

    def interrupt(self, sig, frame):
        if (not self.wait_subproc):
            print()
            self.exit()

    def run(self, *args, **kwargs):
        self.wait_subproc = True
        try:
            ret = subprocess.run(*args, **kwargs)
        except subprocess.CalledProcessError:
            pass
        self.wait_subproc = False
        return ret

    def input(self, *args, **kwargs):
        prev_sighandler = signal.signal(signal.SIGINT, self.dfn_sigint)
        try:
            ret = input(*args, **kwargs)
        except KeyboardInterrupt:
            ret = ""
        signal.signal(signal.SIGINT, prev_sighandler)
        return ret

    def parse_record(self, lines, start_idx=0, target_name=None, nest_prefix="| ", rec_ctx={}):
        cur_record = None 

        idx = start_idx 
        while (idx < len(lines)):
            cur_line = lines[idx]
            if (not cur_record):
                re_rec_decl = re.search("RecordDecl .* (struct|union) ([a-zA-Z0-9_]*) ?definition", cur_line)
                if (re_rec_decl):
                    rec_kind = re_rec_decl.group(1)
                    rec_name = re_rec_decl.group(2)
                    if (target_name == None or target_name == "{} {}".format(rec_kind, rec_name)): 
                        cur_record = RecordType(rec_kind, rec_name)
                        if (not rec_name):
                            re_lineno = re.search("<line:([0-9:]+),", cur_line)
                            if (re_lineno):
                                cur_record.name = "@unnamed_at_{}@".format(re_lineno.group(1))
                                rec_ctx[re_lineno.group(1)] = cur_record
                        else:
                            rec_ctx["{} {}".format(rec_kind, rec_name)] = cur_record
            else:
                if (not cur_line.startswith(nest_prefix)): 
                    break
                re_field_decl = re.search("FieldDecl .* ([a-zA-Z0-9_]+) '([^']+)'", cur_line)
                if (re_field_decl):
                    field_name = re_field_decl.group(1)
                    field_type = re_field_decl.group(2)
                    if ("(unnamed " in field_type):
                        re_lineno = re.search("at [^:]*:([0-9:]*)", field_type)
                        if (re_lineno and re_lineno.group(1) in rec_ctx.keys()):
                            field_type_obj = rec_ctx[re_lineno.group(1)]
                    elif (field_type in rec_ctx.keys()):
                        field_type_obj = rec_ctx[field_type]
                    elif ("struct " in field_type or "union " in field_type):
                        new_rec_type, _ = self.parse_record(lines, start_idx=0, target_name=field_type, nest_prefix="| ", rec_ctx=rec_ctx)
                        if (not new_rec_type):
                            new_rec_type = RecordType(*field_type.split(' ', 1), opaque=True)
                        rec_ctx[field_type] = new_rec_type
                        field_type_obj = new_rec_type
                    else:
                        field_type_obj = GenericType(field_type)
                    cur_record.children += [RecordField(field_type_obj, field_name)]
                elif ("RecordDecl" in cur_line):
                    child_rec, next_idx = self.parse_record(lines, start_idx=idx, nest_prefix="| " + nest_prefix, rec_ctx=rec_ctx)
                    assert(child_rec)
                    idx = next_idx
            idx += 1

        return cur_record, idx-1

    def parse_enum(self, lines, target_name):
        cur_enum = None
        nest_prefix = ""
        target_name_name = target_name.removeprefix("enum ")

        for line in lines:
            if (not cur_enum):
                if (re.match("[| -]*EnumDecl .* {}".format(target_name_name), line)):
                    cur_enum = EnumType(target_name_name)
                    re_prefix = re.search("^([| ]*)", line)
                    assert(re_prefix)
                    nest_prefix = re_prefix.group(1) + " "
            else:
                if (not line.startswith(nest_prefix)): break
                re_enum_const = re.search("EnumConstantDecl .* ([a-zA-Z_][a-zA-Z0-9_]*) '", line)
                if (re_enum_const):
                    cur_enum.children += [re_enum_const.group(1)]

        return cur_enum

    def find_typedef_type(self, lines, target_name):
        suffix = ""

        re_name_suffix = re.search("^([^\\*]*)(\\*+)$", target_name)
        if (re_name_suffix):
            target_name = re_name_suffix.group(1).strip()
            suffix = " " + re_name_suffix.group(2)

        typedef_sig = "{} '".format(target_name)
        for line in lines:
            if ("TypedefDecl" in line):
                if (typedef_sig in line):
                    re_real_name = re.search("'(struct |union |enum )?([A-Za-z0-9_]+)", line)
                    if (re_real_name):
                        return "{}{}".format(re_real_name.group(2), suffix)

        return target_name + suffix

    def is_system_cmd(self, line):
        if (line[0:1] == '%'):
            return line

    def is_preproc(self, line):
        return (re.search("^#.*", line.strip()) != None)

    def is_inline_typedef(self, line):
        return (re.search("^typedef.*;$", line.strip()) != None)

    def get_block_head(self, line):
        line = line.strip()

        re_init_list = re.search("= *{", line)
        if (re_init_list):
            return None

        re_block_head = re.search("^([^{]*){$", line)
        if (re_block_head):
            return re_block_head.group(1).strip()
        else:
            return None

    def get_block_close(self, line):
        line = line.strip()
        re_block_close = re.search("^(}+)", line)
        if (re_block_close):
            return re_block_close.group(1).count('}')
        else:
            return None

    def precmd(self, line):
        if (not self.is_system_cmd(line)):
            return line

        tokens = line.split(' ', 1)
        
        if (tokens[0] == "%exit"):
            self.exit()
        elif (tokens[0][0:6] == "%print"):
            if (len(tokens) == 1):
                with open(self.src_path, 'r') as f:
                    src_lines = f.readlines()
                for src_line in src_lines:
                    print(src_line[:-1])
            else:
                target_name = tokens[1]
                org_target_name = tokens[1]
                options = [""]
                re_options = re.search("%print\\(([^\\)]*)\\)", tokens[0])
                if (re_options):
                    options = re_options.group(1).split(',')

                type_str = "?"
                value_str = "?"
                target_kind = "?"

                ast_out = subprocess.run([CLANG, "-x", "c", "-fsyntax-only", "-Xclang", "-ast-dump", self.src_path], capture_output=True)
                ast_lines = ast_out.stdout.decode().split('\n')

                # Find the kind of 'target_name'
                if (re.match("[A-Za-z_][0-9A-Za-z_]*", target_name)):
                    target_name = self.find_typedef_type(ast_lines, target_name)
                    for ast_line in ast_lines:
                        re_type = re.search("(Var|Function)Decl .* {} '([^']+)'".format(target_name), ast_line)
                        if (re_type):
                            type_str = re_type.group(2)
                            if (re_type.group(1) == "Var"):
                                target_kind = "var"
                            elif (re_type.group(1) == "Function"):
                                target_kind = "func"
                            break
                        else:
                            re_rec_type = re.search("RecordDecl .* (struct|union) {} ?definition".format(target_name), ast_line)
                            if (re_rec_type):
                                type_str = re_rec_type.group(1) + " " + target_name
                                target_kind = "record"
                                break
                            elif (re.match("[| -]*EnumDecl .* {}".format(target_name), ast_line)):
                                type_str = "enum " + target_name
                                target_kind = "enum"
                                break
                            else:
                                type_str = target_name
                                target_kind = "type"
                else:
                    type_str = ""
                    target_kind = "expr" 

                if (target_kind in ["func", "record", "enum", "type"]):
                    print("{} = {}".format(org_target_name, type_str))
                    if (target_kind == "record"):
                        rec_type = self.parse_record(ast_lines, target_name=type_str)[0]
                        if (rec_type):
                            for decl_line in rec_type.get(opt=["no-print-unnamed"]):
                                print(decl_line)
                    elif (target_kind == "enum"):
                        enum_type = self.parse_enum(ast_lines, target_name=type_str)
                        if (enum_type):
                            for decl_line in enum_type.get():
                                print(decl_line)
                elif (target_kind in ["var", "expr"]):
                    # TranslationUnit has no concept of a stack (or the context),
                    # so add the print statement to the current TranslationUnit,
                    # copy it, and restore the TranslationUnit. Dirty hack I guess.
                    if ("ptr" in options):
                        self.stack[-1].add(Statement("AUTO_PRINT((void *)({}));".format(target_name)))
                    elif (any(o.startswith("len=") for o in options)):
                        len_option = [o for o in options if o.startswith("len=")][-1]
                        n_len = len_option.split("=")[1]
                        self.stack[-1].add(Statement(""" 
                            RAW_PRINT("[ ");
                            for (int i = 0; i < ({}); i++) {{
                                AUTO_PRINT(({})[i]);
                                if (i < ({}) - 1)
                                    RAW_PRINT(", ");
                                else
                                    RAW_PRINT(" ]");
                            }}""".format(n_len, target_name, n_len)))
                    elif (type_str.startswith("struct ") or type_str.startswith("union ")):
                        if (type_str[-1] == "*"):
                            deref_op = "->"
                            type_str_inner = type_str[:-1].strip()
                        else:
                            deref_op = "."
                            type_str_inner = type_str
                        rec_obj = self.parse_record(ast_lines, target_name=type_str_inner)[0]
                        if (rec_obj):
                            rec_fields = rec_obj.fields()
                            stmt = "RAW_PRINT(\"{ \");\n"
                            for i, rec_field in enumerate(rec_fields):
                                stmt += "RAW_PRINT(\"{}: \");\n".format(rec_field)
                                stmt += "AUTO_PRINT(({}){}{});\n".format(target_name, deref_op, rec_field)
                                if (i < len(rec_fields) - 1):
                                    stmt += "RAW_PRINT(\", \");\n"
                                else:
                                    stmt += "RAW_PRINT(\" }\");\n"
                            self.stack[-1].add(Statement(stmt))
                    else:
                        self.stack[-1].add(Statement("AUTO_PRINT({});".format(target_name)))
                    tu_copy = copy.deepcopy(self.tu)
                    self.stack[-1].pop()

                    tmp_src_path = "/tmp/c-repl.tmp.c"
                    tmp_exe_path = "/tmp/c-repl.tmp"
                    tu_copy.out_path = tmp_src_path
                    
                    tu_copy.incls += [Preproc("#include \"{}\"".format(os.path.realpath("./assets/print.h")))]
                    assert(tu_copy.print())

                    # TODO: Weirdly, Python subprocess appears to only work with the
                    # redirection with the FD "3" (or probably the next free FD).
                    # For now, use FD 3 and fix it later.
                    clang_out = self.run([CLANG, "-x", "c", tmp_src_path, "-o", tmp_exe_path], check=False, capture_output=True)
                    
                    if (clang_out.returncode == 0):
                        exe_out = self.run("{} 3>&1 >/dev/null 2>&1".format(tmp_exe_path), shell=True, capture_output=True)
                        if (exe_out.returncode == 0):
                            value_str = exe_out.stdout.decode()

                    print("{} = {}{}".format(org_target_name, "({}) ".format(type_str) if (type_str) else "", value_str))
        else:
            logging.warning("unrecognized system command.")

        return line 
    
    def default(self, line):
        if (line == "EOF"):
            self.interrupt(None, None)
        elif (self.is_system_cmd(line)):
            return

        # Identify the type of input.
        if (self.is_preproc(line)):
            cur_obj = Preproc(line)
            self.tu.incls += [cur_obj]
        elif (self.is_inline_typedef(line)):
            cur_obj = Statement(line)
            self.tu.defs += [cur_obj]
        else:
            block_head = self.get_block_head(line)
            n_block_close = self.get_block_close(line)
            if (block_head != None):
                cur_obj = Block(block_head)
                if (cur_obj.kind == "function"):
                    func_dup = False
                    for f in self.tu.funcs:
                        if (f.name == cur_obj.name):
                            func_dup = True
                            break
                    if (func_dup):
                        logging.error("function '{}' already defined.".format(cur_obj.name))
                        return
                    else:
                        self.tu.funcs += [cur_obj]
                elif (cur_obj.kind in ["struct", "union", "enum"]):
                    self.tu.defs += [cur_obj]
                else:
                    self.stack[-1].add(cur_obj)
                self.stack += [cur_obj]
            elif (n_block_close != None):
                cur_obj = None
                if (n_block_close >= len(self.stack)):
                    self.exit()
                elif (n_block_close == 1 and line != "}"):
                    self.stack[-1].end = line
                self.stack = self.stack[:-n_block_close]
            else:
                cur_obj = Statement(line.strip())
                self.stack[-1].add(cur_obj)

        # First compile attempt.
        assert(self.tu.print())
        clang_out = self.run([CLANG, "-x", "c", self.src_path, "-o", self.exe_path], check=False, capture_output=True)

        if ("-Wimplicit-function-declaration" in clang_out.stderr.decode()):
            re_impl_func = re.search("function '([a-zA-Z_0-9]+)'", clang_out.stderr.decode())
            assert(re_impl_func)
            impl_func_name = re_impl_func.group(1)
            logging.warning("function '{}' not included.".format(impl_func_name))

            re_incl_suggest = re.search("inclu.* header <([a-zA-Z_0-9/\\.]+)>", clang_out.stderr.decode())
            if (re_incl_suggest):
                # Obvious library function not included?
                suggested_header_path = re_incl_suggest.group(1)
                logging.warning("automatically including suggested header '{}'...".format(suggested_header_path))
                self.tu.incls += [StdIncludePreproc(suggested_header_path, 0)]
            else:
                # Less obvious function not included?
                try:
                    find_header_out = self.run([FIND_HEADER, "find", impl_func_name, "-f", "-x"], check=False, capture_output=True)
                    if (find_header_out.returncode == 200):
                        logging.error("no cached header information.")
                        logging.error("run '$ {} cache' to cache header information.".format(FIND_HEADER))
                        raise Exception()
                    find_header_out_stdout = find_header_out.stdout.decode().strip()
                    cand_headers = [StdIncludePreproc(e.split('\t')[0], int(e.split('\t')[1])) for e in find_header_out_stdout.split('\n')]
                    for i, cand_header in enumerate(cand_headers):
                        logging.warning("[{}] {} (at '{}')".format(i, str(cand_header), cand_header.path))
                    logging.warning("which to include? ")
                    header_num = self.input()
                    self.tu.incls += [cand_headers[int(header_num)]]
                except:
                    logging.error("header inclusion failed.")

        # Second compile attempt.
        assert(self.tu.print())
        clang_out = self.run([CLANG, "-x", "c", self.src_path, "-Werror=implicit-function-declaration", "-o", self.exe_path], check=False, capture_output=True)

        # Execute.
        if (clang_out.returncode == 0):
            exe_out = self.run([self.exe_path], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

            if (exe_out.returncode != 0):
                cur_obj.err = ["error: (unknown runtime error)"]
                assert(self.tu.print())
                if (self.stack[-1] == cur_obj):
                    self.stack = self.stack[:-1]
                logging.warning("unknown runtime error occurred.")

            new_exe_out = exe_out.stdout.decode().strip()
            excl_exe_out = new_exe_out.removeprefix(self.prev_exe_out).strip()
            if (exe_out.returncode == 0):
                self.prev_exe_out = new_exe_out
            if (excl_exe_out):
                if (excl_exe_out == new_exe_out):
                    logging.warning("previous output changed. printing all...")
                print(excl_exe_out)
        else:
            print(clang_out.stderr.decode())
            err_str = clang_out.stderr.decode().strip()
            re_error_msg = re.search("(error: .*)\n", err_str)
            if (not self.error_diag and re_error_msg):
                err_str = re_error_msg.group(1)
            else:
                err_str = re.sub("^.* error:", "error:", err_str)
                err_str = re.sub("\n.*error.*generated.*", "", err_str)
            cur_obj.err = [l.strip() for l in err_str.split('\n')]
            assert(self.tu.print())
            if (self.stack[-1] == cur_obj):
                self.stack = self.stack[:-1]

    def postcmd(self, stop, line):
        prompt_head = self.stack[-1].repr
        if (prompt_head): prompt_head += " "
        self.prompt = "{}>>> ".format(prompt_head)
        return stop


repl = REPLoop(src_path=args.out_path, error_diag=args.error_diag)

if (args.include):
    for incl_filename in args.include:
        try:
            incl_path = os.path.realpath(incl_filename)
            repl.tu.incls += [Preproc("#include \"{}\"".format(incl_path))]
        except:
            logging.warning("file '{}' not included.".format(incl_filename))
    assert(repl.tu.print())

repl.cmdloop()

# TODO: support incremental build
# TODO: print last return value (if nothing is to print)
# TODO: replay input after the first time
# TODO: print dereferenced non-primitive type (e.g., struct)
